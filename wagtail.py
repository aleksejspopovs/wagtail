import curses

import os
import queue

from zpipe.python import zpipe

from db import Database
from ui.statusbar import StatusBar
from ui.mainwindow import MainWindow
from ui.commandline import CommandLine

# value assigned to the SIGWINCH signal in Linux on x86, arm, sparc and
# most other architectures, according to the manpage signal(7)
SIGWINCH = 28

def main_wrapped(screen, db, zgram_queue):
    curses.use_default_colors()
    curses.curs_set(0)

    status_bar = StatusBar(screen)
    main_window = MainWindow(screen, db)
    curses.doupdate()

    # this window stack kind of duplicates the one kept by
    # curses.panel â€” perhaps we should just use that directly?
    window_stack = [status_bar, main_window]

    while True:
        key = screen.get_wch() # blocks indefinitely

        if key == curses.KEY_RESIZE:
            # this could be either a legitimate SIGWINCH, notifying us that
            # the terminal was resized,
            # or a fake SIGWINCH, generated by get_zephyrgram_listener below,
            # notifying us that we have new zephyrgrams to take from the queue
            while not zgram_queue.empty():
                db.append_message(zgram_queue.get())

            for window in window_stack:
                window.update_size()
        else:
            command, *args = window_stack[-1].handle_keypress(key)

            if command == 'quit':
                break
            elif command == 'cmdline_open':
                window_stack.append(CommandLine(screen))
            elif command == 'cmdline_close':
                assert isinstance(window_stack[-1], CommandLine)
                cmdline = window_stack.pop()
                cmdline.close()

        curses.doupdate()

def get_zephyrgram_listener(zgram_queue):
    def listener(zp, zgram):
        zgram_queue.put(zgram)
        # we send a SIGWINCH signal to ourselves,
        # making ncurses think that the window was resized.
        # this is the best way I know of to interrupt ncurses
        # in blocking mode.
        os.kill(os.getpid(), SIGWINCH)

    return listener

def main():
    zgram_queue = queue.Queue()

    with zpipe.ZPipe(['./zpipe/zpipe'],
        get_zephyrgram_listener(zgram_queue)) as zp:
        zp.subscribe('wagtail-test')

        with Database() as db:
            curses.wrapper(main_wrapped, db, zgram_queue)

if __name__ == '__main__':
    main()
